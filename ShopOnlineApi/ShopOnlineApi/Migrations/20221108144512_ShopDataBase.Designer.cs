// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShopOnlineApi.Data;

#nullable disable

namespace ShopOnlineApi.Migrations
{
    [DbContext(typeof(ShopContext))]
    [Migration("20221108144512_ShopDataBase")]
    partial class ShopDataBase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ShopOnlineApi.ModelsSQL.Adress", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<int?>("HouseNumber")
                        .HasColumnType("integer")
                        .HasColumnName("house_number");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Street")
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.HasKey("UserId")
                        .HasName("adress_pkey");

                    b.ToTable("adress", "newshop");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            City = "Lublin",
                            Country = "Poland",
                            HouseNumber = 14,
                            Id = 1,
                            Street = "Puławska"
                        });
                });

            modelBuilder.Entity("ShopOnlineApi.ModelsSQL.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddData")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("add_data");

                    b.Property<bool?>("Empty")
                        .HasColumnType("boolean")
                        .HasColumnName("empty");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("category", "newshop");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Empty = false,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Empty = true,
                            Name = "Books"
                        });
                });

            modelBuilder.Entity("ShopOnlineApi.ModelsSQL.Contact", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("EmailAdress")
                        .HasColumnType("text")
                        .HasColumnName("email_adress");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.HasKey("UserId")
                        .HasName("contact_pkey");

                    b.ToTable("contact", "newshop");
                });

            modelBuilder.Entity("ShopOnlineApi.ModelsSQL.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_date");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("orders", "newshop");
                });

            modelBuilder.Entity("ShopOnlineApi.ModelsSQL.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("product", "newshop");
                });

            modelBuilder.Entity("ShopOnlineApi.ModelsSQL.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateOnly?>("RegisterDate")
                        .HasColumnType("date")
                        .HasColumnName("register_date");

                    b.HasKey("Id");

                    b.ToTable("users", "newshop");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "James Bond",
                            RegisterDate = new DateOnly(2015, 6, 15)
                        });
                });

            modelBuilder.Entity("ShopOnlineApi.ModelsSQL.Adress", b =>
                {
                    b.HasOne("ShopOnlineApi.ModelsSQL.User", "User")
                        .WithOne("Adress")
                        .HasForeignKey("ShopOnlineApi.ModelsSQL.Adress", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("adress_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopOnlineApi.ModelsSQL.Contact", b =>
                {
                    b.HasOne("ShopOnlineApi.ModelsSQL.User", "User")
                        .WithOne("Contact")
                        .HasForeignKey("ShopOnlineApi.ModelsSQL.Contact", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("contact_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopOnlineApi.ModelsSQL.Order", b =>
                {
                    b.HasOne("ShopOnlineApi.ModelsSQL.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("orders_product_id_fkey");

                    b.HasOne("ShopOnlineApi.ModelsSQL.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("orders_user_id_fkey");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopOnlineApi.ModelsSQL.Product", b =>
                {
                    b.HasOne("ShopOnlineApi.ModelsSQL.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_category_id_fkey");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShopOnlineApi.ModelsSQL.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ShopOnlineApi.ModelsSQL.User", b =>
                {
                    b.Navigation("Adress");

                    b.Navigation("Contact");
                });
#pragma warning restore 612, 618
        }
    }
}
